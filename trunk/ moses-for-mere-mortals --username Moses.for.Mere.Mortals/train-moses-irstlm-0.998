#!/bin/bash
# train-moses-irstlm
# version 0.997
# copyright 2009, Jo√£o L. A. C. Rosas
# licenced under the GPL, version 3, licence
# date: 16/11/2009
# this script is based on instructions presented in several different places, especially the http://www.dlsi.ua.es/~mlf/fosmt-moses.html web page and the Moses manual, as well as on research on the available literature on Moses
# special thanks to H. Leal Fontes, who helped to test the script and made very helpful suggestions
#---------------------------------------------------------------------------------------------------------------------------------------
#THIS SCRIPT ASSUMES THAT A IRSTLM-ENABLED MOSES HAS ALREADY BEEN INSTALLED with create-moses-irstlm IN $mosesdir; ITS VALUE BY DEFAULT IS /home/user/moses-irstlm; CHANGE THIS VARIABLE ACCORDING TO YOUR NEEDS
#---------------------------------------------------------------------------------------------------------------------------------------
# The values of the variables that follow should be filled according to your needs:
#---------------------------------------------------------------------------------------------------------------------------------------
#Base path of Moses installation
mosesdir=$HOME/moses-irstlm

#NOTE 1: The corpus that you want to train, together with the respective tunning files (if different), testing files (if different) and file used to build
#the language model (if different) should be placed in $mosesdir/corpora_for_training !!!
#NOTE 2: After this script ends, you will find a summary of what has been done (the corpus_summary file) in $mosesdir/work (or, if the corpus is exported, in the base directory of the exported corpus)

#Base name of the corpus placed in $datadir (the example that follows refers to the 2 files 1000.en and 1000.pt)
corpusbasename=50000
#Base name of the tuning corpus placed in $datadir (the example that follows refers to the 2 files 1000tuning.en and 1000tuning.pt)
tuningbasename=100tuning
#Base name of corpus used to build LM, placed in $datadir (normally much larger than corpusbasename)
CorpusForLm=100
#Base name of the test set files placed in $datadir (the example that follows refers to the 2 files 1000test.en and 1000test.pt)
testbasename=100test
#Abbreviation of language 1 (source language) 
lang1=en
#Abbreviation of language 2 (destination or reference language) 
lang2=pt
#String that allows you to do a sanity test of your training once it is finished
string="We should not be discussing this issue"
#---------------------------------------------------------------------------------------------------------------------------------------
#NOTE 1: If in doubt, leave these settings as they are; you will do a full training with memory mapping, tuning, a training test, scoring of the training
#test and exportation of the trained corpus to $mosesdir/corpora_trained !!!

#NOTE 2: You can also proceed step by step, so as to better control the whole process. In that case, try to start with the first settings in this list
#(training before memmapping and so on), since the execution of the steps lower down often requires that the first steps have already been done 

#NOTE 3: If you want to use a trained corpus already exported, copy the exported corpus from $mosesdir/corpora_trained to $mosesdir/work, that is,
#the base directory of corpus you are interested in should have the name of its copy changed to $mosesdir/work

#Do training: 1 = Do; Any other value = Don't
training=1
#TODO not working
#Do paralleltraining: 1 = Do; Any other value = Don't
#paralleltraining=0
#Do memory mapping: 1 = Do (at least training should have been done previously!!!); Any other value = Don't
memmapping=1
#Do tuning: 1= Do (at least training should have been done previously!!!) ; Any other value=Don't
tuning=1
#Do runtestscore: 1 = Do; Any other value = Don't
runtrainingtest=1
#NOTE: All the next settings of this section assume that a trained corpus is present in $mosesdir/work !!!
# !!! THE NEXT 2 SETTINGS SHOULD NOT BE BOTH SET TO 1 !!!
#Do ***nonbinary*** filtering: 1 = Do (only active if runtrainingtest = 1 !!!) ; Any other value = Don't 
nonbinaryfiltering=0
#Do ***binary*** filtering: 1 = Do (only active if runtrainingtest = 1 !!!); Any other value = Don't
binaryfiltering=1
#Get score of run test: 1 = Do (a run test should have been done previously!!!); Any other value = Don't 
getscore=1
#At the end of training, create de file corpus_summary in $mosesdir/work
getcorpussummary=1
#Sanity check the trained model
sanitycheck=1
#Export corpus to $mosesdir/corpora_trained at the end of the work (so that you don't loose it)
exportcorpus=1
#--------------------------------------------------------------------------------------------------------------------------
#Minimum length of the sentences (used by clean)
MinLen=1
#Maximum length of the sentences (used by clean)
MaxLen=80
#Maximal length of phrases entered into phrase table (max: 7; choose a lower value if phrase size length is an issue; good value for most purposes: 3)
#Used by moses decoder
MaxPhraseLength=5
#Order of ngrams - the higher the better, but more memory required
Gram=5
#--------------------------------------------------------------------------------------------------------------------------
#end of parameters that you should fill
#--------------------------------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------------------------------
# DO NOT CHANGE THE LINES THAT FOLLOW ... unless you know what you are doing!
#--------------------------------------------------------------------------------------------------------------------------
### 1. Do some preparatory work
# Register date and time of training start
startdate=`date +day:%d/%m/%y-time:%H:%M:%S`

echo "***************** DO PREPARATORY WORK:"
#full path of the base directory where your corpus will be processed (corpus, model, lm, evaluation, recaser) 
workdir=$mosesdir/work

#Create work directory if it does not exist
if [ -d $workdir ]; then
	: #Do nothing
else
	mkdir $workdir
fi
export workdir

#--------------------------------------------------------------------------------------------------------------------------
##1.1 AUXILIARY FUNCTIONS
#function that checks whether a trained corpus exists already
checktrainedcorpusexists() {
	if [ ! -f $workdir/model/moses.ini ]; then
		echo -n "A previously trained corpus does not exist. You have to either train a corpus first or to copy a previously trained corpus from $mosesdir/corpora_trained to $mosesdir, renaming it as $mosesdir/work. Exiting..."
		exit 0
	fi
}

getnameofpresentcorpus() {
	if [ -f $workdir/training/corpusbasename ]; then
		exec<$workdir/training/corpusbasename
		while read line 
		do
			nameofpresentcorpus=$line
		done
	fi
}

gettrainingstatus() {
	#Determine if appropriate training was already done (now or previously)
	if [ -f $workdir/training/corpusbasename ]; then
		exec<$workdir/training/corpusbasename
		while read linetrain
		do
			previoustrain=$linetrain
		done
		if [ "$previoustrain" = "$corpusbasename" ]; then
			trained=1
		else
			trained=0
		fi
	else
		trained=0
	fi
}

getmemorymappingstatus() {
	#Determine if appropriate memory-mapping was already done (now or previously)
	if [ -f $workdir/model/corpusbasename ]; then
		exec<$workdir/model/corpusbasename
		while read linemmp
		do
			previousmmp=$linemmp
		done
		if [ "$previousmmp" = "$corpusbasename" ]; then
			mmp=1
		else
			mmp=0
		fi
	else
		mmp=0
	fi
}

gettuningstatus() {
	#Determine if an appropriate tuning has already been done
	if [ -f $workdir/tuning/tuningbasename ]; then
		exec<$workdir/tuning/tuningbasename
		while read linetun
		do
			previoustuningbasename=$linetun
		done
		if [ -f $workdir/tuning/tuningbasename ]; then
			exec<$workdir/tuning/corpusbasename
			while read linetun
			do
				previouscorpusbasename=$linetun
			done
			if [ "$previouscorpusbasename" = "$corpusbasename" ]; then
				if [ "$previoustuningbasename" = "$tuningbasename" ]; then
					tuned=1
				else
					tuned=0
				fi
			else
				tuned=0
			fi
		else
			tuned=0
		fi
	else
		tuned=0
	fi
}

getteststatus(){
	#Determine if appropriate training test was already done (now or previously)
	if [ -f $workdir/training/corpusbasename ]; then
		exec<$workdir/evaluation/corpusbasename
		while read linetest
		do
			previoustestedcorpus=$linetest
		done
		if [ -f $workdir/evaluation/testbasename ]; then
			exec<$workdir/evaluation/testbasename
			while read linetest1
			do
				previoustestbasename=$linetest1
			done
			if [ "$previoustestedcorpus" = "$corpusbasename" ]; then
				if [ "$previoustestbasename" = "$tuningbasename" ]; then
					tested=1
				else
					tested=0
				fi
			else
				tested=0
			fi
		else
			tested=0
		fi
	else
		tested=0
	fi
}

getallstatuses() {
	gettrainingstatus
	getmemorymappingstatus
	gettuningstatus
	getteststatus
}

#--------------------------------------------------------------------------------------------------------------------------

#Directory where model will be created by moses
# -root-dir parameter of Moses
rootdir=$workdir/model

#full path of the directory where you placed the corpus you want to process, as well as the test set for scoring the results of processing
datadir=$mosesdir/corpora_for_training
#full path of the directory where you placed the tools (giza, irstlm, moses, scripts, ...)
toolsdir=$mosesdir/tools
#Directory where to move the $workdir directory at the end of the corpus processing (allows you to create several independent corpora that do not interfere with one another)
corpus_export_dir=$mosesdir/corpora_trained
#create the directory where you will put the documents to be translated
if [ ! -d $mosesdir/translation_input ]; then
	mkdir $mosesdir/translation_input
fi

# Use IRSTLM
lngmdl=1

#full path to your moses scripts directory
export SCRIPTS_ROOTDIR=$toolsdir/moses/scripts*
#base directory of IRSTLM
export IRSTLM=$toolsdir/irstlm
#export several variables
export corpusbasename
export CorpusForLm
export lang1
export lang2

#--------------------------------------------------------------------------------------------------------------------------

### 2. Train corpus
if (( $training == 1 )) ; then
	echo "********************** TRAINING:"
	#Get name of presently trained corpus in $workdir
	if [ -f $workdir/training/corpusbasename ]; then
		exec<$workdir/training/corpusbasename
		while read line 
		do
			presenttrainedcorpus=$line
		done
	fi

	#if presently trained corpus is different from corpus we want to train, alert for that
	if [ "$presenttrainedcorpus" != "$corpusbasename" ]; then
		if [ $presenttrainedcorpus ]; then
			echo "presenttrainedcorpus:$presenttrainedcorpus"
			echo "A previous training work was not exported to $mosesdir/corpora_trained and will be erased. Would you like to continue (y/n)?"
			read ans
			if [ "$ans" = "n" -o "$ans" = "N" ]; then
				rm -rf $workdir
				mkdir $workdir
				echo "Exiting..."
				exit 0
			fi
			echo "ans:*$ans*"
		fi
	fi

	#if corpus we want to train is not the trained corpus in $wordir, do training; else reuse it
	if  [ "$presenttrainedcorpus" != "$corpusbasename" ]; then
		starttrainingdate=`date +day:%d/%m/%y-time:%H:%M:%S`
		if [ ! -d $workdir ]; then
			mkdir $workdir
		fi

		echo "***************** create necessary directories, if not yet created"
		if [ ! -d $workdir/lm ]; then
			mkdir $workdir/lm
		fi

		if [ ! -d $workdir/training ]; then
			mkdir $workdir/training
		fi

		echo "***************** copy corpus files to $workdir/training"
		#Copy to $workdir/training the ****corpus that you want to process*** (present in $datadir)
		if [ ! -f $workdir/training/$corpusbasename.$lang1 ]; then
			cp $datadir/$corpusbasename.$lang1 $workdir/training/
		fi
		if [ ! -f $workdir/training/$corpusbasename.$lang2 ]; then
			cp $datadir/$corpusbasename.$lang2 $workdir/training/
		fi
		if [ ! -f $workdir/training/$CorpusForLm.$lang2 ]; then
			cp $datadir/$CorpusForLm.$lang2 $workdir/training/
		fi
		echo "***************** tokenize corpus files"
		$toolsdir/scripts/tokenizer.perl -l $lang1 < $workdir/training/$corpusbasename.$lang1 > $workdir/training/$corpusbasename.tok.$lang1
		$toolsdir/scripts/tokenizer.perl -l $lang2 < $workdir/training/$corpusbasename.$lang2 > $workdir/training/$corpusbasename.tok.$lang2
		$toolsdir/scripts/tokenizer.perl -l $lang2 < $workdir/training/$CorpusForLm.$lang2 > $workdir/training/$CorpusForLm.tok.$lang2
		echo "***************** clean corpus files"
		$toolsdir/moses/scripts*/training/clean-corpus-n.perl $workdir/training/$corpusbasename.tok $lang1 $lang2 $workdir/training/$corpusbasename.clean $MinLen $MaxLen
		$toolsdir/moses/scripts*/training/clean-corpus-n.perl $workdir/training/$corpusbasename.tok $lang1 $lang2 $workdir/training/$corpusbasename.clean $MinLen $MaxLen
		echo "***************** lowercase corpus files"
		$toolsdir/scripts/lowercase.perl < $workdir/training/$corpusbasename.clean.$lang1 > $workdir/training/$corpusbasename.lowercased.$lang1
		$toolsdir/scripts/lowercase.perl < $workdir/training/$corpusbasename.clean.$lang2 > $workdir/training/$corpusbasename.lowercased.$lang2
		$toolsdir/scripts/lowercase.perl < $workdir/training/$CorpusForLm.tok.$lang2 > $workdir/lm/$CorpusForLm.lowercased.$lang2

		echo "***************** build quantized language model"
		if [ ! -f $workdir/lm/$CorpusForLm.$lang2.blm.mm ]; then
			#k = number of steps of training procedure
			$toolsdir/irstlm/bin/build-lm.sh -t /tmp -i $workdir/lm/$CorpusForLm.lowercased.$lang2 -o $workdir/lm/$CorpusForLm.$lang2.lm.gz -n $Gram -k 10
			$toolsdir/irstlm/bin/quantize-lm $workdir/lm/$CorpusForLm.$lang2.lm.gz $workdir/lm/$CorpusForLm.$lang2.qlm.gz
			$toolsdir/irstlm/bin/compile-lm $workdir/lm/$CorpusForLm.$lang2.qlm.gz $workdir/lm/$CorpusForLm.$lang2.blm.mm
		else
			echo " Language model was previously created; reusing it"
		fi

		echo "***************** training"
		#if (( $paralleltraining == 1 )) ; then
			#$toolsdir/moses/scripts*/training/train-factored-phrase-model.perl -parallel -scripts-root-dir $toolsdir/moses/scripts*/ -root-dir $workdir -corpus $workdir/training/$corpusbasename -f $lang1 -e $lang2 -alignment grow-diag-final-and -reordering msd-bidirectional-fe -lm 0:$Gram:$workdir/lm/$CorpusForLm.$lang2.blm.mm:1 -phrase-translation-table $workdir/model/phrase-table -reordering-table $workdir/model/reordering-table -max-phrase-length $MaxPhraseLength
		#else
			$toolsdir/moses/scripts*/training/train-factored-phrase-model.perl -scripts-root-dir $toolsdir/moses/scripts*/ -root-dir $workdir -corpus $workdir/training/$corpusbasename.lowercased -f $lang1 -e $lang2 -alignment grow-diag-final-and -reordering msd-bidirectional-fe -lm 0:$Gram:$workdir/lm/$CorpusForLm.$lang2.blm.mm:1  -phrase-translation-table $workdir/model/phrase-table -reordering-table $workdir/model/reordering-table -max-phrase-length $MaxPhraseLength
		#fi
		echo "$corpusbasename" > $workdir/training/corpusbasename
	else
		echo "Training and language memory building already done. Reusing them."
	fi
fi

#--------------------------------------------------------------------------------------------------------------------------

### 3.Diminish RAM Usage 
if (( $memmapping == 1 )) ; then
	echo "***************** MEMORY-MAPPING:"
	#If you have no trained corpus, then alert that you should create it or transfer it back to $mosesdir/work and exit
	checktrainedcorpusexists

	#Get name of trained corpus in $workdir
	getnameofpresentcorpus
	#If name of corpus in workdir$ is different from the value set in $corpusbasename, alert and exit
	if [ "$nameofpresentcorpus" != "$corpusbasename" ]; then
		echo "Only the $nameofpresentcorpus corpus is available for memory-mapping. However, the corpusbasename variable indicates that you want to process the $corpusbasename corpus. You should either train this latter corpus first or change the corpusbasename variable of this script. Exiting..."
		exit 0
	fi

	if [ ! -f $workdir/model/reordering-table.binlexr.voc1 ]; then
		startmmpdate=`date +day:%d/%m/%y-time:%H:%M:%S`
		#Create IRSTLM Memory Mapping:
		cd $workdir/lm
		if [ -f $CorpusForLm.$lang2.blm ]; then
			ln -s $workdir/lm/$CorpusForLm.$lang2.blm $workdir/lm/$CorpusForLm.$lang2.blm.mm
		fi

		#Create Binary Phrase Table:
		echo "********************** create binary phrase table"
		gzip -cd $workdir/model/phrase-table.gz | LC_ALL=C sort | $toolsdir/moses/misc/processPhraseTable -ttable 0 0 - -nscores $Gram -out $workdir/model/phrase-table

		#Create Binary Reordering Table:
		echo "********************** create binary reordering table"
		gzip -cd $workdir/model/reordering-table.gz | LC_ALL=C sort | $toolsdir/moses/misc/processLexicalTable -out $workdir/model/reordering-table

		#You have to manually change the file $workdirmodel/moses.ini, namely the line that indicates ***the corpus name***
		cp $workdir/model/moses.ini $workdir/model/moses.ini.bak.memmap
		echo "$corpusbasename" > $workdir/model/corpusbasename
	else
		echo "This trained corpus was already memory-mapped. Reusing it."
	fi
fi

#--------------------------------------------------------------------------------------------------------------------------

###4. Tuning
if (( $tuning == 1 )) ; then
	echo "***************** TUNING:"
	#If you have no trained corpus, then alert that you should create it or transfer it back to $mosesdir/work and exit
	checktrainedcorpusexists

	#Get name of trained corpus in $workdir
	getnameofpresentcorpus
	#If name of corpus in workdir$ is different from the value set in $corpusbasename, alert and exit
	if [ "$nameofpresentcorpus" != "$corpusbasename" ]; then
		echo "Only the $nameofpresentcorpus corpus is available for tuning. However, the corpusbasename variable indicates that you want to process the $corpusbasename corpus. You should either train this latter corpus first or change the corpusbasename variable of this script. Exiting..."
		exit 0
	fi

	#get base name of files used for previous tuning, if any
	if [ -f $workdir/tuning/tuningbasename ]; then
		exec<$workdir/tuning/tuningbasename
		while read line3
		do
			previoustuningbasename=$line3
		done
	fi

	#if a tuning was done of the same corpus with a different tuning set, alert for that and exit
	if [ "$previoustuningbasename" != "$tuningbasename" ]; then
		if [ $previoustuningbasename ]; then
			echo
			echo "A previous tuning of this corpus with a different set of files (base name: $previoustuningbasename) is present in $workdir/model. If you continue, it will be erased. Would you like to continue (y/n) ?"
			read ans3
			if [ "$ans3" = "n" -o "$ans3" = "N" ]; then
				echo "Exiting."
				exit 0
			fi
		fi
	fi

	if [ ! -f $workdir/tuning/mert-work/moses.ini ]; then	
		starttuningdate=`date +day:%d/%m/%y-time:%H:%M:%S`
		if [ -d $workdir/tuning ]; then
			rm -rf $workdir/tuning
			mkdir $workdir/tuning
		else
			mkdir $workdir/tuning
		fi
		#Prepare data
		echo "********************** copy tuning data to correct location"
		cp $datadir/$tuningbasename.$lang1 $workdir/tuning/
		cp $datadir/$tuningbasename.$lang2 $workdir/tuning/
		echo "********************** tokenize tuning data"
		$toolsdir/scripts/tokenizer.perl -l $lang1 < $workdir/tuning/$tuningbasename.$lang1 > $workdir/tuning/$tuningbasename.tok.$lang1
		$toolsdir/scripts/tokenizer.perl -l $lang2 < $workdir/tuning/$tuningbasename.$lang2 > $workdir/tuning/$tuningbasename.tok.$lang2
		echo "********************** lowercase tuning data"
		$toolsdir/scripts/lowercase.perl < $workdir/tuning/$tuningbasename.tok.$lang1 > $workdir/tuning/$tuningbasename.lowercased.$lang1
		$toolsdir/scripts/lowercase.perl < $workdir/tuning/$tuningbasename.tok.$lang2 > $workdir/tuning/$tuningbasename.lowercased.$lang2
		#Tune!
		cd $workdir/tuning/
		echo "********************** tuning!!!"
		#$toolsdir/moses/scripts*/training/mert-moses-new.pl $workdir/tuning/$tuningbasename.lowercased.$lang1 $workdir/tuning/$tuningbasename.lowercased.$lang2 $toolsdir/moses/moses-cmd/src/moses $workdir/model/moses.ini --mertdir $toolsdir/moses/mert --python /usr/bin --rootdir $toolsdir/moses/scripts* --nocase --no-filter-phrase-table
		$toolsdir/moses/scripts*/training/mert-moses-new.pl $workdir/tuning/$tuningbasename.lowercased.$lang1 $workdir/tuning/$tuningbasename.lowercased.$lang2 $toolsdir/moses/moses-cmd/src/moses $workdir/model/moses.ini --mertdir $toolsdir/moses/mert --rootdir $toolsdir/moses/scripts* --nocase --no-filter-phrase-table
		exit

		#Insert weights determined by tunning into configuration file:
		echo "********************** insert tuning weights in moses.ini"
		$toolsdir/scripts/reuse-weights.perl $workdir/tuning/mert-work/moses.ini < $workdir/model/moses.ini > $workdir/tuning/mert-work/moses.weight-reused.ini
		cp -f $workdir/tuning/mert-work/moses.weight-reused.ini $workdir/model/moses.ini
		echo "$corpusbasename" > $workdir/tuning/corpusbasename
		echo "$tuningbasename" > $workdir/tuning/tuningbasename	
	else
		echo "A previous tuning of this corpus with the same files exists already in $workdir/tuning. Reusing it."
	fi
fi

#--------------------------------------------------------------------------------------------------------------------------

###5.Prepare test set and run the test of the trained corpus
if (( $runtrainingtest == 1 )) ; then
	echo "***************** RUN TRAINING TEST:"
	#If you have no trained corpus, then alert that you should create it or transfer it back to $mosesdir/work and exit
	checktrainedcorpusexists

	#Get name of trained corpus in $workdir
	getnameofpresentcorpus
	#If name of corpus in workdir$ is different from the value set in $corpusbasename, alert and exit
	if [ "$nameofpresentcorpus" != "$corpusbasename" ]; then
		echo "Only the $nameofpresentcorpus corpus is available for testing. However, the corpusbasename variable indicates that you want to test the $corpusbasename corpus. You should either train this latter corpus first or change the corpusbasename variable of this script. Exiting..."
		exit 0
	fi

	if [ ! -f $workdir/evaluation/$testbasename.output.sgm ]; then
		starttestdate=`date +day:%d/%m/%y-time:%H:%M:%S`
		if [ -d $workdir/evaluation ]; then
			rm -rf $workdir/evaluation
			mkdir $workdir/evaluation
		else
			mkdir $workdir/evaluation
		fi
		if [ -d $workdir/recaser ]; then
			rm -rf $workdir/recaser
		fi


		#Copy test data to the place where it will be used
		echo "***************** copy training test data to right location"
		cp $datadir/$testbasename.$lang1 $workdir/evaluation/
		cp $datadir/$testbasename.$lang2 $workdir/evaluation/

		#Tokenize test set:
		echo "***************** tokenize training test data"
		$toolsdir/scripts/tokenizer.perl -l $lang1 < $workdir/evaluation/$testbasename.$lang1 > $workdir/evaluation/$testbasename.input.tok
		$toolsdir/scripts/tokenizer.perl -l $lang2 < $workdir/evaluation/$testbasename.$lang2 > $workdir/evaluation/$testbasename.reference.tok

		#Lowercase test set:
		echo "***************** lowercase training test data"
		$toolsdir/scripts/lowercase.perl < $workdir/evaluation/$testbasename.input.tok > $workdir/evaluation/$testbasename.input

		$toolsdir/scripts/lowercase.perl < $workdir/evaluation/$testbasename.reference.tok > $workdir/evaluation/$testbasename.reference
		cp $workdir/model/moses.ini $workdir/evaluation/

		if (( $binaryfiltering == 1 )) ; then
			$bf=1
			echo "***************** binary filtering"
			#Filter Test Data (to reduce memory consumption):
			$toolsdir/moses/scripts*/training/filter-and-binarize-model-given-input.pl $toolsdir/moses/misc/processLexicalTable $workdir/evaluation/filtered.$testbasename $workdir/evaluation/moses.ini $workdir/evaluation/$testbasename.input
		fi

		if (( $nonbinaryfiltering == 1 )) ; then
			if (( $bf == 1 )) ; then
				: #Do nothing
			else
				echo "***************** non-binary filtering"
				#Filter Test Data (to reduce memory consumption):
				$toolsdir/moses/scripts*/training/filter-model-given-input.pl $workdir/evaluation/filtered.$testbasename $workdir/evaluation/moses.ini $workdir/evaluation/$testbasename.input
			fi
		fi

		#Run Decoder:
		echo "***************** run decoder test"
		$toolsdir/moses/moses-cmd/src/moses -f $workdir/evaluation/moses.ini < $workdir/evaluation/$testbasename.input  > $workdir/evaluation/$testbasename.output

		if [ -d $workdir/recaser ]; then
			: #do nothing
		else
			mkdir $workdir/recaser
		fi

		##Recase and detokenize test set results:
		#Train Recaser:
		cp $datadir/$testbasename.$lang2 $workdir/recaser/

		cd $toolsdir/moses/script*
		cd recaser
		if (( $lngmdl == 1 )) ; then
			echo "***************** patch train-recaser.perl"
			sed -e 's#^.*my \$cmd.*NGRAM_COUNT.*$#\tmy $cmd = "toolsdir/irstlm/bin/build-lm.sh -t /tmp -i $CORPUS -n Gram -o $DIR/cased.irstlm.gz";#g' -e "s#toolsdir#$toolsdir#g" -e "s#Gram#$Gram#g" train-recaser.perl > train-recaser.perl.out
			sed -e 's#^.*my \$cmd.*TRAIN\_SCRIPT.*$#\tmy $cmd = "$TRAIN_SCRIPT --root-dir $DIR --model-dir $DIR --first-step $first --alignment a --corpus $DIR/aligned --f lowercased --e cased --max-phrase-length $MAX_LEN --lm 0:Gram:$DIR/cased.irstlm.gz:1";#g' -e "s#Gram#$Gram#g" train-recaser.perl.out > train-recaser.perl
			#rm train-recaser.perl.out
			chmod +x train-recaser.perl
		fi

		cd $toolsdir/moses/script*
		cd recaser
		echo "***************** train recaser"
		$toolsdir/moses/script*/recaser/train-recaser.perl -train-script $toolsdir/moses/script*/training/train-factored-phrase-model.perl -corpus $workdir/recaser/$testbasename.$lang2 -dir $workdir/recaser -scripts-root-dir $toolsdir/moses/scripts*

		#Recase the output:
		echo "***************** recase test results"
		if (( $lngmdl == 1 )) ; then
			sed -e 's#^.*cased.*$#1 0 Gram workdir/recaser/cased.irstlm.gz#g' -e "s#Gram#$Gram#g" -e "s#workdir#$workdir#g" $workdir/recaser/moses.ini > $workdir/recaser/moses.ini.out
			cp -f $workdir/recaser/moses.ini.out $workdir/recaser/moses.ini
		fi

		$toolsdir/moses/script*/recaser/recase.perl -model $workdir/recaser/moses.ini -in $workdir/evaluation/$testbasename.output -moses $toolsdir/moses/moses-cmd/src/moses > $workdir/evaluation/$testbasename.output.recased

		#Detokenize the output:
		echo "***************** detokenize test results"
		$toolsdir/scripts/detokenizer.perl -l $lang2 < $workdir/evaluation/$testbasename.output.recased > $workdir/evaluation/$testbasename.output.detokenized

		echo "***************** wrap test result in SGM"
		#Wrap the output in SGM:

		exec<$workdir/evaluation/$testbasename.$lang1
		echo '<srcset setid="'$testbasename'" srclang="any">' > $workdir/evaluation/$testbasename-src.$lang1.sgm
		echo '<DOC docid="'$testbasename'">' >> $workdir/evaluation/$testbasename-src.$lang1.sgm
		numseg=0
		while read line
		   do
			numseg=$(($numseg+1))
		   	echo "<seg id=$numseg>"$line"</seg>" >> $workdir/evaluation/$testbasename-src.$lang1.sgm
		   done
		echo "</DOC>" >> $workdir/evaluation/$testbasename-src.$lang1.sgm
		echo "</srcset>" >> $workdir/evaluation/$testbasename-src.$lang1.sgm

		exec<$workdir/evaluation/$testbasename.$lang2
		echo '<refset setid="'$testbasename'" srclang="any" trglang="'$lang2'">' > $workdir/evaluation/$testbasename-ref.$lang2.sgm
		echo '<DOC docid="'$testbasename'" sysid="ref">' >> $workdir/evaluation/$testbasename-ref.$lang2.sgm
		numseg=0
		while read line
		   do
			numseg=$(($numseg+1))
		   	echo "<seg id=$numseg>"$line"</seg>" >> $workdir/evaluation/$testbasename-ref.$lang2.sgm
		   done
		echo "</DOC>" >> $workdir/evaluation/$testbasename-ref.$lang2.sgm
		echo "</refset>" >> $workdir/evaluation/$testbasename-ref.$lang2.sgm

		exec<$workdir/evaluation/$testbasename.output.detokenized
		echo '<tstset setid="'$testbasename'" srclang="any" trglang="'$lang2'">' > $workdir/evaluation/$testbasename.output.sgm
		echo '<DOC docid="'$testbasename'" sysid="ref">' >> $workdir/evaluation/$testbasename.output.sgm
		numseg=0
		while read line
		   do
			numseg=$(($numseg+1))
		   	echo "<seg id=$numseg>"$line"</seg>" >> $workdir/evaluation/$testbasename.output.sgm
		   done
		echo "</DOC>" >> $workdir/evaluation/$testbasename.output.sgm
		echo "</tstset>" >> $workdir/evaluation/$testbasename.output.sgm
		echo "$corpusbasename" > $workdir/evaluation/corpusbasename
		echo "$testbasename" > $workdir/evaluation/testbasename
	else
		echo "Training test already done with the same corpus and test files. Reusing it."
	fi	
fi

#--------------------------------------------------------------------------------------------------------------------------

###6.Get score of run (training) test
if (( getscore == 1 )); then
	echo "***************** GET SCORE:"
	#check if a trained corpus exists and react appropriately
	checktrainedcorpusexists

	#Get name of trained corpus in $workdir
	getnameofpresentcorpus
	#If name of corpus in workdir$ is different from the value set in $corpusbasename, alert and exit
	if [ "$nameofpresentcorpus" != "$corpusbasename" ]; then
		echo "Only the $nameofpresentcorpus corpus is available for scoring. However, the corpusbasename variable indicates that you want to score the $corpusbasename corpus. You should either train this latter corpus first or change the corpusbasename variable of this script. Exiting..."
		exit 0
	fi

	startscoringdate=`date +day:%d/%m/%y-time:%H:%M:%S`
	#If a training test was not done before, alert for that and exit
	echo "***************** scoring"
	if [ ! -f $workdir/evaluation/100test-src.en.sgm ]; then
		echo "In order to get a training test score, you have to have done a training test first. Please set the runtrainingtest variable of this script to 1 in order to run a training test. Exiting..."
		exit 0
	fi

	score=`$toolsdir/mteval-v11b.pl -s $workdir/evaluation/$testbasename-src.$lang1.sgm -r $workdir/evaluation/$testbasename-ref.$lang2.sgm -t $workdir/evaluation/$testbasename.output.sgm -c`
	echo $score
fi

#--------------------------------------------------------------------------------------------------------------------------
###7. Get corpus summary
if (( $getcorpussummary == 1 )); then
	echo "***************** MAKE TRAINING SUMMARY:"
	#check if a trained corpus exists and react appropriately
	checktrainedcorpusexists

	#Get name of trained corpus in $workdir
	getnameofpresentcorpus
	#If name of corpus in workdir$ is different from the value set in $corpusbasename, alert and exit
	if [ "$nameofpresentcorpus" != "$corpusbasename" ]; then
		echo "Only the $nameofpresentcorpus corpus is available in $workdir. However, the corpusbasename variable of this script indicates that you want to summarize the $corpusbasename corpus. You should either train this latter corpus first or change the corpusbasename variable of this script. Exiting..."
		exit 0
	fi

	getallstatuses

	echo "*** Duration ***: " > $workdir/corpus_summary
	echo "------------------------------------------------------------------------" >> $workdir/corpus_summary
	echo "Start time:           $startdate" >> $workdir/corpus_summary
	echo "Start training:       $starttrainingdate" >> $workdir/corpus_summary
	echo "Start memory-mapping: $startmmpdate" >> $workdir/corpus_summary
	echo "Start tuning:         $starttuningdate" >> $workdir/corpus_summary
	echo "Start test:           $starttestdate" >> $workdir/corpus_summary
	echo "Start scoring:        $startscoringdate" >> $workdir/corpus_summary
	echo "End time:             `date +day:%d/%m/%y-time:%H:%M:%S`" >> $workdir/corpus_summary
	echo "------------------------------------------------------------------------" >> $workdir/corpus_summary
	echo "*** Script version ***: 0.998" >> $workdir/corpus_summary
	echo "------------------------------------------------------------------------" >> $workdir/corpus_summary
	echo "*** Moses base directory ***: $mosesdir" >> $workdir/corpus_summary
	echo "------------------------------------------------------------------------" >> $workdir/corpus_summary
	echo "*** Languages*** :" >> $workdir/corpus_summary
	echo "------------------------------------------------------------------------" >> $workdir/corpus_summary
	echo "Source language: $lang1" >> $workdir/corpus_summary
	echo "Destination language: $lang2" >> $workdir/corpus_summary
	echo "------------------------------------------------------------------------" >> $workdir/corpus_summary
	echo "*** Corpus Files ***:" >> $workdir/corpus_summary
	echo "------------------------------------------------------------------------" >> $workdir/corpus_summary
	echo "Corpus files names: $workdir/training/$corpusbasename.$lang1 || $workdir/training/$corpusbasename.$lang2" >> $workdir/corpus_summary
	echo "File used to build language model: $workdir/training/$CorpusForLm.$lang2" >> $workdir/corpus_summary
	echo "Files used for tuning: $workdir/tuning/$tuningbasename.$lang1 || $workdir/tuning/$tuningbasename.$lang2" >> $workdir/corpus_summary
	echo "Files used for testing training: $workdir/evaluation/$testbasename.$lang1 || $workdir/evaluation/$testbasename.$lang2" >> $workdir/corpus_summary
	echo "------------------------------------------------------------------------" >> $workdir/corpus_summary
	echo "*** General Settings *** (yes means that the step was executed and kept, now or previously):" >> $workdir/corpus_summary
	echo "------------------------------------------------------------------------" >> $workdir/corpus_summary
	echo "lngmdl=$lngmdl (0 = SRILM; 1 = IRSTLM; 5 = RandLM)" >> $workdir/corpus_summary
	if [ $trained=1 ]; then
		echo "training executed=yes" >> $workdir/corpus_summary
	else
		echo "training executed=no" >> $workdir/corpus_summary
	fi
	#echo "paralleltraining=$paralleltraining" >> $workdir/corpus_summary
	if [ $mmp=1 ]; then
		echo "memmapping executed=yes" >> $workdir/corpus_summary
	else
		echo "memmapping executed=no" >> $workdir/corpus_summary
	fi
	if [ $tuned=1 ]; then
		echo "tuning executed=yes" >> $workdir/corpus_summary
	else
		echo "tuning executed=no" >> $workdir/corpus_summary
	fi
	if [ $tested=1 ]; then
		echo "training test executed=yes" >> $workdir/corpus_summary
		if (( $nonbinaryfiltering == 1 )); then
			echo "nonbinaryfiltering executed=yes" >> $workdir/corpus_summary
		elif (( $binaryfiltering == 1)); then
			echo "binaryfiltering executed=yes" >> $workdir/corpus_summary
		else
			echo "filtering executed=no" >> $workdir/corpus_summary
		fi
	else
		echo "training test executed=no" >> $workdir/corpus_summary
	fi
	if [ "$score" != "" ]; then
		echo "getscore executed=yes" >> $workdir/corpus_summary
	else
		echo "getscore executed=no" >> $workdir/corpus_summary
	fi
	echo "------------------------------------------------------------------------" >> $workdir/corpus_summary
	echo "*** Linguistic Settings ***:" >> $workdir/corpus_summary
	echo "------------------------------------------------------------------------" >> $workdir/corpus_summary
	echo "Gram=$Gram" >> $workdir/corpus_summary
	echo "MinLen=$MinLen" >> $workdir/corpus_summary
	echo "MaxLen=$MaxLen" >> $workdir/corpus_summary
	echo "MaxPhraseLength=$MaxPhraseLength" >> $workdir/corpus_summary
	echo "------------------------------------------------------------------------" >> $workdir/corpus_summary
	if [ "$score" != "" ]; then
		echo "*** Score ***:" >> $workdir/corpus_summary
		echo "------------------------------------------------------------------------" >> $workdir/corpus_summary
		echo "$score" >> $workdir/corpus_summary
		echo "------------------------------------------------------------------------" >> $workdir/corpus_summary
	fi
fi

#--------------------------------------------------------------------------------------------------------------------------
###8. Sanity check of the trained corpus
if (( $sanitycheck == 1 )); then
	echo "********************** SANITY CHECK:"
	#check if a trained corpus exists and react appropriately
	checktrainedcorpusexists

	#Get name of trained corpus in $workdir
	getnameofpresentcorpus
	#If name of corpus in workdir$ is different from the value set in $corpusbasename, alert and exit
	if [ "$nameofpresentcorpus" != "$corpusbasename" ]; then
		echo "Only the $nameofpresentcorpus corpus is available in $workdir. However, the corpusbasename variable indicates that you want to sanity check the $corpusbasename corpus. You should either train this latter corpus first or change the corpusbasename variable of this script. Exiting..."
		exit 0
	fi

	# Test training +/-tuning
	echo $string | tr [:upper:]  [:lower:] | TMP=/tmp $toolsdir/moses/moses-cmd/src/moses -f $workdir/model/moses.ini
fi

#--------------------------------------------------------------------------------------------------------------------------
###9. Export corpus
if (( $exportcorpus == 1 )); then
	echo "***************** EXPORT CORPUS:"

	getallstatuses

	getnameofpresentcorpus
	#If name of corpus in workdir$ is different from the value set in $corpusbasename, alert and exit
	if [ "$nameofpresentcorpus" != "$corpusbasename" ]; then
		echo "Only the $nameofpresentcorpus corpus is available in $workdir. However, the corpusbasename variable indicates that you want to sanity check the $corpusbasename corpus. You should either train this latter corpus first or change the corpusbasename variable of this script. Exiting..."
		exit 0
	else
		#Times stamp for exported corpus
		prdate=`date +%d-%m-%Y_%H:%M`
	 
		#Name with which the present $workdir will be exported
		corpus_export_name=$corpusbasename-$lang1-$lang2-LM$CorpusForLm-Gram$Gram-MM$mmp-T$tuned-MinLen$MinLen-MaxLen$MaxLen-MaxPhraseLength$MaxPhraseLength_$prdate

		echo "The trained corpus will now be moved to $mosesdir/corpora_trained"
		if [ -d $corpus_export_dir ]; then
			: #do nothing
		else
			mkdir $corpus_export_dir
		fi

		mv -f $workdir $corpus_export_dir/$corpus_export_name
		if [ $tuned=0 ]; then
			rm -rf $corpus_export_dir/$corpus_export_name/tuning
		fi
		if [ $tested=0 ]; then
			rm -rf $corpus_export_dir/$corpus_export_name/evaluation
		fi
	fi
fi
